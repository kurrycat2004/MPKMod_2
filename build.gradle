plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = '2.0'
group = 'io.github.kurrycat.mpkmod' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'mpkmod'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.19'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    library
    implementation.extendsFrom library
}

allprojects {
    repositories {
        maven { url 'https://jitpack.io/' }
    }
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.19-41.1.0'

    implementation 'org.junit.jupiter:junit-jupiter:5.8.1'


    //implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.8'
    library group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.8'
    //implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.8.8'
    library group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.8.8'
    //implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.8'
    library group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.8'

    /*compileOnly 'com.github.JnCrMx:discord-game-sdk4j:v0.5.5'*/
    //implementation 'com.github.JnCrMx:discord-game-sdk4j:v0.5.5'
    library 'com.github.JnCrMx:discord-game-sdk4j:v0.5.5'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

minecraft.runs {
    client { // Creates a new run configuration with the name 'client'
        mods {
            mpkmod { source sourceSets.main } // Adds the sourceSet 'main' as the sources for the mod 'mymod'
        }
    }
}

//fix ClassNotFoundException during runClient because of dependencies not being added to classpath in dev environment
minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title": "mpkmod",
                "Specification-Vendor": "kurrycat",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"kurrycat",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
       //configurations.runtimeClasspath.collect { it.name.contains("discord-game-sdk4j") || it.name.contains("jackson") ? zipTree(it) : null}
       configurations.library.collect { it.isDirectory() ? it : zipTree(it)}
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
